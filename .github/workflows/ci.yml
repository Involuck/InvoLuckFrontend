name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      playwright-version: ${{ steps.playwright-version.outputs.version }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Get Playwright version
        id: playwright-version
        run:
          echo "version=$(npm list @playwright/test --depth=0 --json | jq -r
          '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

  linters:
    name: Linters & Code Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run format:check

      - name: TypeScript check
        run: npx tsc --noEmit || echo "TypeScript check completed"

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, linters]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run unit tests with coverage
        run: npm run test:unit

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, linters]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run integration tests
        run: npm run test:integration

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, linters]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Build Next.js app
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next
          retention-days: 1

  system_tests:
    name: System Tests (E2E)
    runs-on: ubuntu-latest
    needs: [build, unit_tests, integration_tests, setup]
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key:
            playwright-${{ needs.setup.outputs.playwright-version }}-${{
            runner.os }}

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install chromium --with-deps

      - name: Install system dependencies (cache hit)
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps

      - name: Start Next.js app
        run: |
          npm run start &
          echo $! > nextjs.pid
          npx wait-on http://localhost:3000 --timeout 30000 --interval 1000

      - name: Warm up application
        run: |
          curl -f http://localhost:3000 >/dev/null 2>&1 || true
          sleep 2

      - name: Run system tests
        run: |
          npm run test:e2e -- \
            --shard=${{ matrix.shard }}/2 \
            --workers=2 \
            --reporter=line \
            --project=chromium
        env:
          CI: true
          NODE_ENV: production

      - name: Stop Next.js app
        if: always()
        run: |
          if [ -f nextjs.pid ]; then
            kill $(cat nextjs.pid) || true
            rm nextjs.pid
          fi

      - name: Upload test artifacts on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-results-shard-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 3

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        run: |
          npm audit --audit-level high --json > audit-results.json || true
          cat audit-results.json

      - name: Run Snyk security scan
        uses: snyk/actions/node@0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: audit-results.json
          retention-days: 30

  performance_check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: [build, setup]
    continue-on-error: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: node_modules
          key: v2-${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next

      - name: Install dependencies (fallback)
        if: needs.setup.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Bundle size analysis
        run: |
          npx next build --profile
          npx next analyze || echo "Bundle analysis completed"

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          npm run start &
          sleep 30
          lhci autorun --config=.lighthouserc.json || echo "Lighthouse analysis completed"
