name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  setup:
    name: Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
      cache-key: ${{ steps.generate-key.outputs.key }}
      artifact-created: ${{ steps.cache.outputs.cache-hit != 'true' }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Generate cache key
        id: generate-key
        run:
          echo "key=v1-${{ runner.os }}-node-${{ hashFiles('package-lock.json')
          }}" >> $GITHUB_OUTPUT

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ steps.generate-key.outputs.key }}
          restore-keys: |
            v1-${{ runner.os }}-node-

  linters:
    name: Linters & Code Quality
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: |
          npm ci

      - name: Set up Node.js (only if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier
        run: npm run format:check

      - name: TypeScript check
        run: npx tsc --noEmit || echo "TypeScript check completed"

  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [setup, linters]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: npm ci

      - name: Set up Node.js (only if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run unit tests with coverage
        run: npm run test:unit

      - name: Upload coverage to GitHub
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  integration_tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [setup, linters]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: npm ci

      - name: Set up Node.js (only if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run integration tests
        run: npm run test:integration

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [setup, linters]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: npm ci

      - name: Build Next.js app
        run: |
          echo "Starting build process..."
          npm run build
          BUILD_EXIT_CODE=$?
          echo "Build exit code: $BUILD_EXIT_CODE"

          if [ $BUILD_EXIT_CODE -ne 0 ]; then
            echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
            exit $BUILD_EXIT_CODE
          fi

          echo "✅ Build completed successfully"

      - name: Verify build artifacts
        run: |
          echo "Verifying build output..."

          if [ ! -d ".next" ]; then
            echo "❌ Error: .next directory not found"
            echo "Current directory contents:"
            ls -la
            exit 1
          fi

          echo "✅ .next directory found"
          echo "Contents of .next directory:"
          ls -la .next/

          # Check if .next has the expected structure
          if [ -d ".next/static" ] && [ -d ".next/server" ]; then
            echo "✅ Build artifacts structure looks correct"
          else
            echo "⚠️ Warning: Unexpected .next structure"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: .next
          retention-days: 7

  system_tests:
    name: System Tests (E2E)
    runs-on: ubuntu-latest
    needs: [setup, build, unit_tests, integration_tests]
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        shard: [1, 2]
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next

      - name: Set up Node.js (only if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Playwright browsers (fallback)
        if: steps.cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Start Next.js app
        run: |
          npm run start &
          npx wait-on http://localhost:3000 --timeout 60000

      - name: Run system tests
        run: npm run test:e2e -- --shard=${{ matrix.shard }}/2

      - name: Upload test artifacts on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: system-test-artifacts-${{ matrix.shard }}
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  security_scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    continue-on-error: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: npm ci

      - name: Set up Node.js (only if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Run npm audit
        run: |
          npm audit --audit-level high --json > audit-results.json || true
          cat audit-results.json

      - name: Run Snyk security scan
        uses: snyk/actions/node@0.4.0
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: audit-results.json
          retention-days: 30

  performance_check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: [setup, build]
    continue-on-error: true
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Restore from cache
        uses: actions/cache/restore@v3
        id: cache
        with:
          path: |
            node_modules
            ~/.cache/ms-playwright
          key: ${{ needs.setup.outputs.cache-key }}
          fail-on-cache-miss: false

      - name: Download node_modules artifact (fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created == 'true'
        uses: actions/download-artifact@v4
        with:
          name: node-modules
          path: node_modules/

      - name: Install dependencies (emergency fallback)
        if:
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.artifact-created != 'true'
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next

      - name: Set up Node.js (only if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Bundle size analysis
        run: |
          npx next build --profile
          npx next analyze || echo "Bundle analysis completed"

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          npm run start &
          sleep 30
          lhci autorun --config=.lighthouserc.json || echo "Lighthouse analysis completed"

  deployment_check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs:
      [
        unit_tests,
        integration_tests,
        system_tests,
        security_scan,
        performance_check
      ]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check all jobs status
        run: |
          echo "Unit Tests: ${{ needs.unit_tests.result }}"
          echo "Integration Tests: ${{ needs.integration_tests.result }}"
          echo "System Tests: ${{ needs.system_tests.result }}"
          echo "Security Scan: ${{ needs.security_scan.result }}"
          echo "Performance Check: ${{ needs.performance_check.result }}"

      - name: All checks passed
        if: >
          needs.unit_tests.result == 'success' && needs.integration_tests.result
          == 'success' && needs.system_tests.result == 'success'
        run: |
          echo "✅ All critical CI checks passed successfully!"
          echo "🚀 Ready for deployment"
          echo "::notice title=CI Success::All tests and checks completed successfully"

      - name: Some checks failed
        if: >
          needs.unit_tests.result != 'success' || needs.integration_tests.result
          != 'success' || needs.system_tests.result != 'success'
        run: |
          echo "❌ Some critical tests failed"
          echo "::error title=CI Failed::Critical tests failed - check logs"
          exit 1
